<?php
/**
 *  SeekQuarry/Yioop --
 *  Open Source Pure PHP Search Engine, Crawler, and Indexer
 *
 *  Copyright (C) 2013  Chris Pollett chris@pollett.org
 *
 *  LICENSE:
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  END LICENSE
 *
 * @author Chris Pollett chris@pollett.org
 * @package seek_quarry
 * @subpackage indexing_plugin
 * @license http://www.gnu.org/licenses/ GPL3
 * @link http://www.seekquarry.com/
 * @copyright 2009 - 2014
 * @filesource
 */

if(!defined('BASE_DIR')) {echo "BAD REQUEST"; exit();}

/** Loads processor used for */
require_once BASE_DIR."/lib/processors/text_processor.php";
/** Base indexing plugin class*/
require_once BASE_DIR."/lib/indexing_plugins/indexing_plugin.php";
/** Get the crawlHash function */
require_once BASE_DIR."/lib/utility.php";
/** Loads common constants for web crawling */
require_once BASE_DIR."/lib/crawl_constants.php";

/**
 * IndexingPlugin is used to filter documents by term during a crawl.
 *
 * When this plugin is in use, each document summary that is generated by a
 * TextProcessor or subclass during a crawl will be further processed by it
 * pageSummaryProcessing method. As part of this
 * processing the summary's title and description are sent to
 * the method checkFilter. Here they are compared against the associative array
 * $this->filter_terms which consists of a list of term => array of actions
 * pairs. Actions can either be directives that might appear within a ROBOTS
 * meta tag of an HTML document: NOINDEX, NOFOLLOW, NOCACHE, NOARCHIVE, NOODP,
 * NOYDIR, NONE or can be the word NOPROCESS, JUSTFOLLOW, NOTCONTAINS.
 * Usually, if checkFilter returns true then pageSummaryProcessing adds the 
 * meta words to the document summary and returns. If one of the actions
 * was NOTCONTAIN, then only if checkFilter returned false are the meta words
 * added. The crawl makes use of the meta word info when performing indexing.
 * In the case where the actions contain NOPROCESS the summary returned from
 * pageSummaryProcessing will be false this will prevent any indexing of this
 * document from occuring at all. In the case where the actions contain
 * JUSTFOLLOW, the document won't be stored in the index but links from it will
 * be followed.
 *
 * This plugin has been created with a dummy list of filter words. By doing a
 * crawl on the test site contain in the archive
 *      tests/word-filter-test-crawl.zip
 * one can  test how it behaves on those terms. To make use of
 * this plugin on real web data one probably wants to alter the choice of words.
 * This can be done from Admin > Page Options > Crawl Time tab by clicking on 
 * the Configure link next to the plugin. Alternatively, one could subclass this
 * plugin in WORK_DIRECTORY/app/lib/indexing_plugins where one has a different
 * array of filter_terms. To get a more sophisticated filtering process than a
 * mere word-in-document-true-or-false check one would override checkFilter.
 * One can also directly modify the code below to achieve these effects, but
 * altering code under the BASE_DIR makes it slightly harder to newer versions
 * Yioop as they come out.
 *
 * @author Chris Pollett
 * @package seek_quarry
 * @subpackage indexing_plugin
 */
class WordfilterPlugin extends IndexingPlugin implements CrawlConstants
{
    /**
     * Associative array of term => actions pairs, where term is a word to
     * check against the filter and actions is an array of actions from
     * among: NOINDEX, NOFOLLOW, NOCACHE, NOARCHIVE, NOODP, NOYDIR, NONE,
     *    NOTCONTAIN, JUSTFOLLOW, and NOPROCESS.
     *
     * @var array
     */
    var $filter_terms = array(
        "term0" => array("NOTCONTAIN", "JUSTFOLLOW"),
        "term1" => array("NOPROCESS"),
        "term2" => array("NOFOLLOW", "NOSNIPPET")
    );

    /**
     * This method adds robots metas to or removes entirely a summary
     * produced by a text page processor or its subsclasses depending on
     * whether the summary title and description contain one of the terms
     * listed in $this->filter_times.
     *
     * @param array &$summary the summary data produced by the relevant page
     *      processor's handle method; modified in-place.
     */
    function pageSummaryProcessing(&$summary)
    {
        foreach ($this->filter_terms as $term => $actions) {
            $filter_flag = $this->checkFilter($term, $summary[self::TITLE],
                $summary[self::DESCRIPTION]);
            if(in_array("NOTCONTAIN", $actions)) {
                $filter_flag = ($filter_flag) ? false : true;
                $actions = array_values(array_diff($actions,
                    array("NOTCONTAIN")));
            }
            if($filter_flag) {
                if(in_array("NOPROCESS", $actions)) {
                    crawlLog("  Word filter plugin removed page.");
                    $summary = false;
                    break;
                } else {
                    if(!isset($summary[self::ROBOT_METAS])) {
                        $summary[self::ROBOT_METAS] = array();
                    }
                    $summary[self::ROBOT_METAS] += $actions;
                }
            }
        }
    }

    /**
     * Used to check if the $term occurence in the $title and $description
     * meets a criteria under which it should be filtered.
     *
     * For this version of checkFilter we are only checking whether the term
     * appears in the title or description
     *
     * @param string $term the word or string to search for
     * @param string $title of a web page summary
     * @param string $description of a web page summary
     * @return bool whether the summary should be filtered or not
     */
    function checkFilter($term, $title, $description)
    {
        $title_description = $title." ".$description;
        if(strpos($title_description, $term) !== false) {
            return true;
        }
        return false;
    }


    /**
     *  Serializes to a file words and behaviors that should be used with this
     *  plugin
     *
     *  @param array $configuration an associative array of word => actions
     *      that say how this plugin should behave
     */
    function saveConfiguration($configuration)
    {
        $config_file = WORK_DIRECTORY."/data/word_filter_plugin.txt";
        file_put_contents($config_file, serialize($configuration));
    }

    /**
     *  Reads plugin configuration data from data/word_filter_plugin.txt
     *  on the name server into an array. Used when a crawl is started. This
     *  data is then automatically serialized by admin controller and sent to
     *  queue servers as part of starting a crawl
     *
     *  @return array configuration associative array
     */
    function loadConfiguration()
    {
        $config_file = WORK_DIRECTORY."/data/word_filter_plugin.txt";
        if(file_exists($config_file)) {
            $configuration = @unserialize(
                file_get_contents($config_file));
        } else {
            $configuration = $this->filter_terms;
        }
        return $configuration;
    }

    /**
     *  takes a configuration array of word=>actions and sets them as the words
     *  and actions for this instance of the plugin. Typically used on a 
     *  queue_server or on a fetcher.
     *
     *  @param array $configuration a word => actions associative array
     */
    function setConfiguration($configuration)
    {
        $this->filter_terms = $configuration;
    }

    /**
     *  Behaves as a "controller" for the configuration page of the plugin.
     *  It is called by the AdminController pageOptions activity method to
     *  let the plugin handle any configuration $_REQUEST data sent by this
     *  activity with regard to the plugin. This method sees if the $_REQUEST
     *  has word filter plugin configuration data, and if so cleans and saves
     *  it. It then modidfies $data so that if the plugin's configuration view
     *  is drawn it makes use of the current plugin configuration info.
     *
     *  @param array &$data info to be used by the admin view to draw itself.
     */
    function configureHandler(&$data)
    {
        if(isset($_REQUEST['filter_words'])) {
            $pre_filter_words =  str_replace("&amp;", "&",
                $_REQUEST['filter_words']);
            $pre_filter_words = @htmlentities($pre_filter_words,
                ENT_QUOTES, "UTF-8");
            $word_actions = explode("\n", $pre_filter_words);
            foreach($word_actions as $word_action) {
                if(mb_stripos($word_action, ":") > 0) {
                    list($word, $actions_string,) = explode(":", $word_action);
                    $actions_string = mb_ereg_replace("\s+", "",
                        $actions_string);
                    $actions = explode(",", $actions_string);
                    $configuration[trim($word)] = $actions;
                }
            }
            $data['SCRIPT'] .= "doMessage('<h1 class=\"red\" >".
                tl('wordfilter_plugin_settings_saved')."</h1>')";

        }
        if(!isset($configuration)) {
            $configuration = $this->loadConfiguration();
        }
        if(!is_array($configuration)) {
            $configuration = array();
        }
        $this->saveConfiguration($configuration);
        $filter_words = "";
        foreach($configuration as $word => $actions) {
            $filter_words .= "$word:".implode(",", $actions)."\n";
        }
        $data["filter_words"] = $filter_words;
    }

    /**
     *  Used to draw the HTML configure screen for the word filter plugin.
     *
     *  @param array &$data contains configuration data to be used in drawing
     *      the view
     */
    function configureView(&$data)
    {
        ?>
        <h2 class="center"><?php e(tl('wordfilter_plugin_preferences')); ?></h2>
        <form  method="post" action='?'>
        <input type="hidden" name="c" value="admin" />
        <input type="hidden" name="a" value="pageOptions" />
        <input type="hidden" id='option-type' name="option_type"
            value="crawl_time" />
        <input type="hidden" name="<?php e(CSRF_TOKEN); ?>" value="<?php
            e($data[CSRF_TOKEN]); ?>" />
        <textarea class="medium-text-area" name="filter_words" ><?php 
            e($data["filter_words"])?></textarea>
        <div class="center slight-pad">
            <button class="button-box"
            type="submit"><?php
                e(tl('wordfilter_plugin_save'));
            ?></button>
        </div>
        </form>
        <?php
    }

    /**
     * Which mime type page processors this plugin should do additional
     * processing for
     *
     * @return array an array of page processors
     */
    static function getProcessors()
    {
        return array("TextProcessor"); //will apply to all subclasses
    }


}

?>
